import he from'he';import mermaidAPI from'./mermaidAPI';import{logger}from'./logger';const init=function(){const conf=mermaidAPI.getConfig();logger.debug('Starting rendering diagrams');let nodes;if(arguments.length>=2){if(typeof arguments[0]!=='undefined'){mermaid.sequenceConfig=arguments[0]}nodes=arguments[1]}else{nodes=arguments[0]}let callback;if(typeof arguments[arguments.length-1]==='function'){callback=arguments[arguments.length-1];logger.debug('Callback function found')}else{if(typeof conf.mermaid!=='undefined'){if(typeof conf.mermaid.callback==='function'){callback=conf.mermaid.callback;logger.debug('Callback function found')}else{logger.debug('No Callback function found')}}}nodes=nodes===undefined?document.querySelectorAll('.mermaid'):typeof nodes==='string'?document.querySelectorAll(nodes):nodes instanceof window.Node?[nodes]:nodes;logger.debug('Start On Load before: '+mermaid.startOnLoad);if(typeof mermaid.startOnLoad!=='undefined'){logger.debug('Start On Load inner: '+mermaid.startOnLoad);mermaidAPI.initialize({startOnLoad:mermaid.startOnLoad})}if(typeof mermaid.ganttConfig!=='undefined'){mermaidAPI.initialize({gantt:mermaid.ganttConfig})}let txt;for(let i=0;i<nodes.length;i++){const element=nodes[i];if(!element.getAttribute('data-processed')){element.setAttribute('data-processed',true)}else{continue}const id=`mermaid-${Date.now()}`;txt=element.innerHTML;txt=he.decode(txt).trim().replace(/<br\s*\/?>/gi,'<br/>');mermaidAPI.render(id,txt,(svgCode,bindFunctions)=>{element.innerHTML=svgCode;if(typeof callback!=='undefined'){callback(id)}if(bindFunctions)bindFunctions(element)},element)}};const initialize=function(config){if(typeof config.mermaid!=='undefined'){if(typeof config.mermaid.startOnLoad!=='undefined'){mermaid.startOnLoad=config.mermaid.startOnLoad}if(typeof config.mermaid.htmlLabels!=='undefined'){mermaid.htmlLabels=config.mermaid.htmlLabels}}mermaidAPI.initialize(config);logger.debug('Initializing mermaid ')};const contentLoaded=function(){let config;if(mermaid.startOnLoad){config=mermaidAPI.getConfig();if(config.startOnLoad){mermaid.init()}}else{if(typeof mermaid.startOnLoad==='undefined'){logger.debug('In start, no config');config=mermaidAPI.getConfig();if(config.startOnLoad){mermaid.init()}}}};if(typeof document!=='undefined'){window.addEventListener('load',function(){contentLoaded()},false)}const mermaid={startOnLoad:true,htmlLabels:true,mermaidAPI,parse:mermaidAPI.parse,render:mermaidAPI.render,init,initialize,contentLoaded};export default mermaid;